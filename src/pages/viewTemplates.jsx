import { useState, useEffect } from "react";
import "../App.css";
import { Link, useNavigate } from "react-router-dom";
import { GoogleGenerativeAI } from "@google/generative-ai";
import logo from "../assets/logo.png";

export default function TemplatesPage() {
  const [active, setActive] = useState("Template");
  const [templates, setTemplates] = useState([]);
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(true);
  const [chatInput, setChatInput] = useState("");
  const [chatMessages, setChatMessages] = useState([]);
  const [isChatOpen, setIsChatOpen] = useState(false);
  const navigate = useNavigate();

  const API = "http://45.252.248.204:8080/api";
  const GEMINI_API_KEY = "AIzaSyBip7sULJoCXfitgcPyWK20j5RIEYI6LtM";

  // Kh·ªüi t·∫°o Gemini client
  const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
  const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });

  // H√†m fetch k√®m token
  const authFetch = (url, options = {}) => {
    const token = localStorage.getItem("authToken") || "";
    return fetch(`${API}${url}`, {
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...(token ? { Authorization: `Bearer ${token}` } : {}),
        ...(options.headers || {}),
      },
    });
  };

  // Fetch danh s√°ch templates
  useEffect(() => {
    const fetchTemplates = async () => {
      try {
        const res = await authFetch("/templates/getAll", { method: "GET" });
        if (!res.ok) throw new Error("Kh√¥ng th·ªÉ l·∫•y danh s√°ch templates!");
        const result = await res.json();
        setTemplates(result?.data || []);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchTemplates();
  }, []);

  // Parse ph·∫£n h·ªìi AI ‚Üí ch√®n link c√≥ th·ªÉ nh·∫•n
  const parseAIResponse = (text) => {
    // N·∫øu ph·∫£n h·ªìi c√≥ format "ƒê·ªÅ xu·∫•t template..." + link
    const match = text.match(/ƒê·ªÅ xu·∫•t template:\s*"([^"]+)"\s*v·ªõi ID\s*(\d+)/i);
    const linkMatch = text.match(/https?:\/\/[^\s]+/gi);

    let content = text;

    // Thay th·∫ø link trong text th√†nh th·∫ª <a>
    if (linkMatch) {
      linkMatch.forEach((url) => {
        content = content.replace(
          url,
          `<a href="${url}" target="_blank" rel="noopener noreferrer" class="text-blue-500 underline hover:text-blue-700">${url}</a>`
        );
      });
    }

    // N·∫øu c√≥ template name v√† ID ‚Üí ch√®n th√™m ph·∫ßn "xem chi ti·∫øt"
    if (match) {
      const name = match[1];
      const id = match[2];
      const reactLink = (
        <Link
          to={`/templates/${id}`}
          className="text-blue-500 underline font-medium hover:text-blue-700"
          target="_blank"
          rel="noopener noreferrer"
        >
          Nh·∫•n v√†o ƒë√¢y ƒë·ªÉ xem chi ti·∫øt {name}
        </Link>
      );

      // D√πng dangerouslySetInnerHTML ƒë·ªÉ render link HTML
      return (
        <span
          dangerouslySetInnerHTML={{
            __html: content,
          }}
        >
          {reactLink}
        </span>
      );
    }

    // N·∫øu ch·ªâ c√≥ link th√¥i (AI t·ª± tr·∫£ ra link)
    if (linkMatch) {
      return (
        <span
          dangerouslySetInnerHTML={{
            __html: content,
          }}
        />
      );
    }

    // M·∫∑c ƒë·ªãnh
    return <span>{text}</span>;
  };

  // G·ªçi Gemini API c√≥ x√©t gi√°
  const callGeminiAI = async (input, conversationHistory, templates) => {
    if (!GEMINI_API_KEY) {
      throw new Error("API key c·ªßa Gemini kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh!");
    }

    const historyText = conversationHistory
      .map(
        (msg) => `${msg.sender === "user" ? "Ng∆∞·ªùi d√πng: " : "AI: "}${msg.text}`
      )
      .join("\n");

    const templatesText = templates
      .map(
        (tpl, index) =>
          `${index + 1}. T√™n: "${tpl.templateName}"\n   M√¥ t·∫£: ${
            tpl.description
          }\n   Gi√°: ${
            tpl.price !== null
              ? `${tpl.price.toLocaleString("vi-VN")}‚Ç´`
              : "Mi·ªÖn ph√≠"
          }\n   Ng√†y t·∫°o: ${tpl.createAt}`
      )
      .join("\n\n");

    const prompt = `
      D∆∞·ªõi ƒë√¢y l√† danh s√°ch templates c√≥ s·∫µn:
      ${templatesText}

      B·∫°n l√† tr·ª£ l√Ω AI t∆∞ v·∫•n template website c·ªßa Weplant.
      - ƒê√¢y l√† l·ªãch s·ª≠ h·ªôi tho·∫°i: ${historyText}
      - Ng∆∞·ªùi d√πng v·ª´a h·ªèi: "${input}"
      - H√£y ƒë·ªÅ xu·∫•t 1 template ph√π h·ª£p nh·∫•t d·ª±a tr√™n:
         + M·ª•c ƒë√≠ch s·ª≠ d·ª•ng (n·∫øu c√≥)
         + Phong c√°ch m√¥ t·∫£
         + M·ª®C GI√Å ph√π h·ª£p v·ªõi t√∫i ti·ªÅn ng∆∞·ªùi d√πng (n·∫øu h·ªç nh·∫Øc ƒë·∫øn ng√¢n s√°ch, v√≠ d·ª• ‚Äúr·∫ª‚Äù, ‚Äúmi·ªÖn ph√≠‚Äù, ‚Äúd∆∞·ªõi 1 tri·ªáu‚Äù, v.v.)
      - N·∫øu ng∆∞·ªùi d√πng kh√¥ng n√≥i r√µ ng√¢n s√°ch, b·∫°n ch·ªçn template c√≥ ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t ph√π h·ª£p m√¥ t·∫£.
      - Format ch√≠nh x√°c: "ƒê·ªÅ xu·∫•t template: [T√™n ƒë·∫ßy ƒë·ªß] v·ªõi ID [templateId s·ªë]."
      -ƒê·ªÅ xu·∫•t template: [T√™n ƒë·∫ßy ƒë·ªß] v·ªõi ID [templateId].  
üëâ    -Xem chi ti·∫øt: http://localhost:5173/templates/[templateId]  
      -Gi·∫£i th√≠ch ng·∫Øn g·ªçn v√¨ sao template n√†y ph√π h·ª£p.
      - Vi·∫øt ng·∫Øn g·ªçn, th√¢n thi·ªán, ti·∫øng Vi·ªát.
      - N·∫øu kh√¥ng c√≥ template ph√π h·ª£p, g·ª£i √Ω li√™n h·ªá ƒë·ªôi ng≈© Weplant ƒë·ªÉ t·∫°o m·∫´u ri√™ng.
    `;

    const result = await model.generateContent(prompt);
    const generatedText = result.response.text();

    if (!generatedText) {
      throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ Gemini API!");
    }

    return generatedText;
  };

  // Submit chat
  const handleChatSubmit = async () => {
    if (!chatInput.trim()) {
      setChatMessages([
        ...chatMessages,
        { sender: "ai", text: "Vui l√≤ng nh·∫≠p √Ω t∆∞·ªüng ho·∫∑c c√¢u h·ªèi!" },
      ]);
      return;
    }

    const updatedMessages = [
      ...chatMessages,
      { sender: "user", text: chatInput },
    ];
    setChatMessages(updatedMessages);

    try {
      const aiResponse = await callGeminiAI(
        chatInput,
        updatedMessages,
        templates
      );
      const parsedResponse = parseAIResponse(aiResponse);
      setChatMessages((prev) => [
        ...prev,
        { sender: "ai", content: parsedResponse },
      ]);
    } catch (err) {
      setChatMessages((prev) => [
        ...prev,
        { sender: "ai", text: `L·ªói: ${err.message}` },
      ]);
    }

    setChatInput("");
  };

  return (
    <div className="font-sans bg-white">
      {/* Navbar */}
      <nav className="w-full bg-white shadow-sm fixed top-0 left-0 z-50">
        <div className="max-w-7xl mx-auto flex justify-between items-center px-10 py-4">
          <div className="flex items-center gap-2">
            <img src={logo} alt="weplant logo" className="h-16 w-auto" />
            <span className="text-blue-600 font-bold text-xl">weplant</span>
          </div>
          <div className="flex gap-8">
            {[
              { label: "Trang Ch·ªß", path: "/" },
              { label: "Template", path: "/templates" },
              { label: "V·ªÅ Ch√∫ng T√¥i", path: "/about" },
              { label: "Li√™n H·ªá", path: "/contact" },
            ].map((item) => (
              <Link
                key={item.label}
                to={item.path}
                onClick={() => setActive(item.label)}
                className={`text-sm font-medium transition ${
                  active === item.label ? "text-blue-600" : "text-gray-700"
                } hover:text-blue-600`}
              >
                {item.label}
              </Link>
            ))}
          </div>
        </div>
      </nav>

      {/* Hero */}
      <section className="bg-gradient-to-r from-blue-50 to-blue-100 text-center py-20 mt-16">
        <h1 className="text-3xl font-bold text-gray-800 mb-4">
          Kh√°m Ph√° C√°c Template Website
        </h1>
        <p className="text-gray-600 max-w-2xl mx-auto">
          Chat v·ªõi AI ƒë·ªÉ t√¨m template ph√π h·ª£p nh·∫•t v·ªõi nhu c·∫ßu v√† ng√¢n s√°ch c·ªßa
          b·∫°n!
        </p>
        <button
          onClick={() => {
            setIsChatOpen(true);
            if (chatMessages.length === 0) {
              setChatMessages([
                {
                  sender: "ai",
                  text: "Ch√†o b·∫°n! B·∫°n mu·ªën d√πng template cho m·ª•c ƒë√≠ch g√¨ v√† ng√¢n s√°ch kho·∫£ng bao nhi√™u?",
                },
              ]);
            }
          }}
          className="mt-4 px-6 py-3 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700"
        >
          Chat v·ªõi AI t∆∞ v·∫•n
        </button>
      </section>

      {/* Chatbox */}
      {isChatOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl p-6 w-full max-w-lg">
            <h2 className="text-xl font-bold mb-4">T∆∞ V·∫•n Template V·ªõi AI</h2>
            <div className="h-64 overflow-y-auto mb-4 p-4 border rounded-lg">
              {chatMessages.map((msg, index) => (
                <div
                  key={index}
                  className={`mb-2 ${
                    msg.sender === "user" ? "text-right" : "text-left"
                  }`}
                >
                  <span
                    className={`inline-block p-2 rounded-lg ${
                      msg.sender === "user" ? "bg-blue-100" : "bg-gray-100"
                    }`}
                  >
                    {msg.content || msg.text}
                  </span>
                </div>
              ))}
            </div>
            <div className="flex gap-2">
              <input
                type="text"
                value={chatInput}
                onChange={(e) => setChatInput(e.target.value)}
                placeholder="Nh·∫≠p c√¢u h·ªèi ho·∫∑c √Ω t∆∞·ªüng..."
                className="flex-grow border rounded-lg px-4 py-2"
                onKeyPress={(e) => e.key === "Enter" && handleChatSubmit()}
              />
              <button
                onClick={handleChatSubmit}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
              >
                G·ª≠i
              </button>
            </div>
            <button
              onClick={() => setIsChatOpen(false)}
              className="mt-4 text-sm text-gray-600 hover:underline"
            >
              ƒê√≥ng
            </button>
          </div>
        </div>
      )}

      {/* Templates Grid */}
      <section className="max-w-6xl mx-auto px-6 mt-12 grid grid-cols-1 md:grid-cols-3 gap-6">
        {loading && <p>ƒêang t·∫£i templates...</p>}
        {error && <p className="text-red-600">{error}</p>}
        {!loading &&
          !error &&
          templates.map((tpl) => (
            <div
              key={tpl.templateId}
              className="bg-white shadow rounded-2xl overflow-hidden hover:shadow-lg transition"
            >
              <Link to={`/templates/${tpl.templateId}`}>
                <div className="h-40 bg-gray-200">
                  {tpl.images?.length > 0 ? (
                    <img
                      src={tpl.images[0].imageUrl}
                      alt={tpl.templateName}
                      className="w-full h-full object-cover"
                    />
                  ) : (
                    <div className="flex items-center justify-center h-full text-gray-500">
                      Kh√¥ng c√≥ ·∫£nh
                    </div>
                  )}
                </div>
              </Link>
              <div className="p-4">
                <Link
                  to={`/templates/${tpl.templateId}`}
                  className="font-semibold text-lg mb-2 block hover:text-blue-600"
                >
                  {tpl.templateName}
                </Link>
                <p className="text-gray-600 text-sm mb-2">
                  {tpl.description || "Ch∆∞a c√≥ m√¥ t·∫£"}
                </p>
                <p className="text-sm font-medium text-green-600 mb-2">
                  {tpl.price !== null
                    ? tpl.price.toLocaleString("vi-VN", {
                        style: "currency",
                        currency: "VND",
                      })
                    : "Mi·ªÖn ph√≠"}
                </p>
                <div className="mt-3">
                  <Link
                    to={`/templates/${tpl.templateId}`}
                    className="text-sm text-blue-600 hover:underline font-medium"
                  >
                    Xem chi ti·∫øt ‚Üí
                  </Link>
                </div>
              </div>
            </div>
          ))}
      </section>

      {/* ‚úÖ Footer */}
      <footer className="w-full bg-gray-900 text-gray-300 mt-20">
        <div className="grid md:grid-cols-4 gap-8 px-10 lg:px-20 py-12 max-w-7xl mx-auto">
          <div>
            <h3 className="font-bold text-white mb-4">weplant</h3>
            <p>
              Ch√∫ng t√¥i gi√∫p b·∫°n bi·∫øn √Ω t∆∞·ªüng th√†nh hi·ªán th·ª±c v·ªõi c√°c gi·∫£i ph√°p
              thi·∫øt k·∫ø website t√πy ch·ªânh.
            </p>
            <div className="flex space-x-4 mt-4">
              <a href="#">
                <i className="fab fa-facebook" />
              </a>
              <a href="#">
                <i className="fab fa-linkedin" />
              </a>
              <a href="#">
                <i className="fab fa-twitter" />
              </a>
            </div>
          </div>
          <div>
            <h4 className="font-semibold text-white mb-4">D·ªãch V·ª•</h4>
            <ul className="space-y-2">
              <li>Thi·∫øt K·∫ø Website</li>
              <li>Template C√≥ S·∫µn</li>
              <li>T∆∞ V·∫•n UI/UX</li>
              <li>B·∫£o Tr√¨ Website</li>
            </ul>
          </div>
          <div>
            <h4 className="font-semibold text-white mb-4">H·ªó Tr·ª£</h4>
            <ul className="space-y-2">
              <li>Trung T√¢m H·ªó Tr·ª£</li>
              <li>C√¢u H·ªèi Th∆∞·ªùng G·∫∑p</li>
              <li>H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng</li>
              <li>Li√™n H·ªá</li>
            </ul>
          </div>
          <div>
            <h4 className="font-semibold text-white mb-4">Li√™n H·ªá</h4>
            <ul className="space-y-2">
              <li>üìß contact.weplant@gmail.com</li>
              <li>üìû 094 7722102</li>
              <li>üìç 123 ƒê∆∞·ªùng Nguy·ªÖn Hu·ªá, Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh</li>
            </ul>
          </div>
        </div>
        <div className="border-t border-gray-700 py-6 px-10 lg:px-20 flex flex-col md:flex-row justify-between items-center text-sm text-gray-500">
          <p>¬© 2025 Weplant. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
          <div className="flex space-x-6 mt-4 md:mt-0">
            <a href="#">ƒêi·ªÅu Kho·∫£n S·ª≠ D·ª•ng</a>
            <a href="#">Ch√≠nh S√°ch B·∫£o M·∫≠t</a>
          </div>
        </div>
      </footer>
    </div>
  );
}
